// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1beta1 "github.com/openshift/api/machine/v1beta1"
	machinev1beta1 "github.com/openshift/client-go/machine/applyconfigurations/machine/v1beta1"
	typedmachinev1beta1 "github.com/openshift/client-go/machine/clientset/versioned/typed/machine/v1beta1"
	gentype "k8s.io/client-go/gentype"
)

// fakeMachines implements MachineInterface
type fakeMachines struct {
	*gentype.FakeClientWithListAndApply[*v1beta1.Machine, *v1beta1.MachineList, *machinev1beta1.MachineApplyConfiguration]
	Fake *FakeMachineV1beta1
}

func newFakeMachines(fake *FakeMachineV1beta1, namespace string) typedmachinev1beta1.MachineInterface {
	return &fakeMachines{
		gentype.NewFakeClientWithListAndApply[*v1beta1.Machine, *v1beta1.MachineList, *machinev1beta1.MachineApplyConfiguration](
			fake.Fake,
			namespace,
			v1beta1.SchemeGroupVersion.WithResource("machines"),
			v1beta1.SchemeGroupVersion.WithKind("Machine"),
			func() *v1beta1.Machine { return &v1beta1.Machine{} },
			func() *v1beta1.MachineList { return &v1beta1.MachineList{} },
			func(dst, src *v1beta1.MachineList) { dst.ListMeta = src.ListMeta },
			func(list *v1beta1.MachineList) []*v1beta1.Machine { return gentype.ToPointerSlice(list.Items) },
			func(list *v1beta1.MachineList, items []*v1beta1.Machine) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
