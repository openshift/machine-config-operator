// Code generated by informer-gen. DO NOT EDIT.

package v1alpha1

import (
	context "context"
	time "time"

	apioperatorv1alpha1 "github.com/openshift/api/operator/v1alpha1"
	versioned "github.com/openshift/client-go/operator/clientset/versioned"
	internalinterfaces "github.com/openshift/client-go/operator/informers/externalversions/internalinterfaces"
	operatorv1alpha1 "github.com/openshift/client-go/operator/listers/operator/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
	watch "k8s.io/apimachinery/pkg/watch"
	cache "k8s.io/client-go/tools/cache"
)

// ClusterVersionOperatorInformer provides access to a shared informer and lister for
// ClusterVersionOperators.
type ClusterVersionOperatorInformer interface {
	Informer() cache.SharedIndexInformer
	Lister() operatorv1alpha1.ClusterVersionOperatorLister
}

type clusterVersionOperatorInformer struct {
	factory          internalinterfaces.SharedInformerFactory
	tweakListOptions internalinterfaces.TweakListOptionsFunc
}

// NewClusterVersionOperatorInformer constructs a new informer for ClusterVersionOperator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewClusterVersionOperatorInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers) cache.SharedIndexInformer {
	return NewFilteredClusterVersionOperatorInformer(client, resyncPeriod, indexers, nil)
}

// NewFilteredClusterVersionOperatorInformer constructs a new informer for ClusterVersionOperator type.
// Always prefer using an informer factory to get a shared informer instead of getting an independent
// one. This reduces memory footprint and number of connections to the server.
func NewFilteredClusterVersionOperatorInformer(client versioned.Interface, resyncPeriod time.Duration, indexers cache.Indexers, tweakListOptions internalinterfaces.TweakListOptionsFunc) cache.SharedIndexInformer {
	return cache.NewSharedIndexInformer(
		&cache.ListWatch{
			ListFunc: func(options v1.ListOptions) (runtime.Object, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().ClusterVersionOperators().List(context.TODO(), options)
			},
			WatchFunc: func(options v1.ListOptions) (watch.Interface, error) {
				if tweakListOptions != nil {
					tweakListOptions(&options)
				}
				return client.OperatorV1alpha1().ClusterVersionOperators().Watch(context.TODO(), options)
			},
		},
		&apioperatorv1alpha1.ClusterVersionOperator{},
		resyncPeriod,
		indexers,
	)
}

func (f *clusterVersionOperatorInformer) defaultInformer(client versioned.Interface, resyncPeriod time.Duration) cache.SharedIndexInformer {
	return NewFilteredClusterVersionOperatorInformer(client, resyncPeriod, cache.Indexers{cache.NamespaceIndex: cache.MetaNamespaceIndexFunc}, f.tweakListOptions)
}

func (f *clusterVersionOperatorInformer) Informer() cache.SharedIndexInformer {
	return f.factory.InformerFor(&apioperatorv1alpha1.ClusterVersionOperator{}, f.defaultInformer)
}

func (f *clusterVersionOperatorInformer) Lister() operatorv1alpha1.ClusterVersionOperatorLister {
	return operatorv1alpha1.NewClusterVersionOperatorLister(f.Informer().GetIndexer())
}
