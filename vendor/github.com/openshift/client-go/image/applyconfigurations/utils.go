// Code generated by applyconfiguration-gen. DO NOT EDIT.

package applyconfigurations

import (
	v1 "github.com/openshift/api/image/v1"
	imagev1 "github.com/openshift/client-go/image/applyconfigurations/image/v1"
	internal "github.com/openshift/client-go/image/applyconfigurations/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=image.openshift.io, Version=v1
	case v1.SchemeGroupVersion.WithKind("Image"):
		return &imagev1.ImageApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageLayer"):
		return &imagev1.ImageLayerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageLookupPolicy"):
		return &imagev1.ImageLookupPolicyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageManifest"):
		return &imagev1.ImageManifestApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageSignature"):
		return &imagev1.ImageSignatureApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageStream"):
		return &imagev1.ImageStreamApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageStreamMapping"):
		return &imagev1.ImageStreamMappingApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageStreamSpec"):
		return &imagev1.ImageStreamSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("ImageStreamStatus"):
		return &imagev1.ImageStreamStatusApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("NamedTagEventList"):
		return &imagev1.NamedTagEventListApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SignatureCondition"):
		return &imagev1.SignatureConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SignatureGenericEntity"):
		return &imagev1.SignatureGenericEntityApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SignatureIssuer"):
		return &imagev1.SignatureIssuerApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("SignatureSubject"):
		return &imagev1.SignatureSubjectApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TagEvent"):
		return &imagev1.TagEventApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TagEventCondition"):
		return &imagev1.TagEventConditionApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TagImportPolicy"):
		return &imagev1.TagImportPolicyApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TagReference"):
		return &imagev1.TagReferenceApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("TagReferencePolicy"):
		return &imagev1.TagReferencePolicyApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
