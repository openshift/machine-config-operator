// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	json "encoding/json"
	"fmt"

	v1alpha1 "github.com/openshift/api/machineconfiguration/v1alpha1"
	machineconfigurationv1alpha1 "github.com/openshift/client-go/machineconfiguration/applyconfigurations/machineconfiguration/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakePinnedImageSets implements PinnedImageSetInterface
type FakePinnedImageSets struct {
	Fake *FakeMachineconfigurationV1alpha1
}

var pinnedimagesetsResource = v1alpha1.SchemeGroupVersion.WithResource("pinnedimagesets")

var pinnedimagesetsKind = v1alpha1.SchemeGroupVersion.WithKind("PinnedImageSet")

// Get takes name of the pinnedImageSet, and returns the corresponding pinnedImageSet object, and an error if there is any.
func (c *FakePinnedImageSets) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.PinnedImageSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(pinnedimagesetsResource, name), &v1alpha1.PinnedImageSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PinnedImageSet), err
}

// List takes label and field selectors, and returns the list of PinnedImageSets that match those selectors.
func (c *FakePinnedImageSets) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.PinnedImageSetList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(pinnedimagesetsResource, pinnedimagesetsKind, opts), &v1alpha1.PinnedImageSetList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.PinnedImageSetList{ListMeta: obj.(*v1alpha1.PinnedImageSetList).ListMeta}
	for _, item := range obj.(*v1alpha1.PinnedImageSetList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested pinnedImageSets.
func (c *FakePinnedImageSets) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(pinnedimagesetsResource, opts))
}

// Create takes the representation of a pinnedImageSet and creates it.  Returns the server's representation of the pinnedImageSet, and an error, if there is any.
func (c *FakePinnedImageSets) Create(ctx context.Context, pinnedImageSet *v1alpha1.PinnedImageSet, opts v1.CreateOptions) (result *v1alpha1.PinnedImageSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(pinnedimagesetsResource, pinnedImageSet), &v1alpha1.PinnedImageSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PinnedImageSet), err
}

// Update takes the representation of a pinnedImageSet and updates it. Returns the server's representation of the pinnedImageSet, and an error, if there is any.
func (c *FakePinnedImageSets) Update(ctx context.Context, pinnedImageSet *v1alpha1.PinnedImageSet, opts v1.UpdateOptions) (result *v1alpha1.PinnedImageSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(pinnedimagesetsResource, pinnedImageSet), &v1alpha1.PinnedImageSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PinnedImageSet), err
}

// Delete takes name of the pinnedImageSet and deletes it. Returns an error if one occurs.
func (c *FakePinnedImageSets) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteActionWithOptions(pinnedimagesetsResource, name, opts), &v1alpha1.PinnedImageSet{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakePinnedImageSets) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(pinnedimagesetsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.PinnedImageSetList{})
	return err
}

// Patch applies the patch and returns the patched pinnedImageSet.
func (c *FakePinnedImageSets) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.PinnedImageSet, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(pinnedimagesetsResource, name, pt, data, subresources...), &v1alpha1.PinnedImageSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PinnedImageSet), err
}

// Apply takes the given apply declarative configuration, applies it and returns the applied pinnedImageSet.
func (c *FakePinnedImageSets) Apply(ctx context.Context, pinnedImageSet *machineconfigurationv1alpha1.PinnedImageSetApplyConfiguration, opts v1.ApplyOptions) (result *v1alpha1.PinnedImageSet, err error) {
	if pinnedImageSet == nil {
		return nil, fmt.Errorf("pinnedImageSet provided to Apply must not be nil")
	}
	data, err := json.Marshal(pinnedImageSet)
	if err != nil {
		return nil, err
	}
	name := pinnedImageSet.Name
	if name == nil {
		return nil, fmt.Errorf("pinnedImageSet.Name must be provided to Apply")
	}
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(pinnedimagesetsResource, *name, types.ApplyPatchType, data), &v1alpha1.PinnedImageSet{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.PinnedImageSet), err
}
