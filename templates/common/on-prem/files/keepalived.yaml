mode: 0644
path: "/etc/kubernetes/manifests/keepalived.yaml"
contents:
  inline: |
    {{ if (onPremPlatformAPIServerInternalIP .) -}}
    kind: Pod
    apiVersion: v1
    metadata:
      name: keepalived
      namespace: openshift-{{ onPremPlatformShortName . }}-infra
      creationTimestamp:
      deletionGracePeriodSeconds: 65
      labels:
        app: {{ onPremPlatformShortName . }}-infra-vrrp
    spec:
      volumes:
      - name: resource-dir
        hostPath:
          path: "/etc/kubernetes/static-pod-resources/keepalived"
      - name: script-dir
        hostPath:
          path: "/etc/kubernetes/static-pod-resources/keepalived/scripts"
      - name: kubeconfig
        hostPath:
          path: "/etc/kubernetes"
      - name: kubeconfigvarlib
        hostPath:
          path: "/var/lib/kubelet"
      - name: conf-dir
        hostPath:
          path: "/etc/keepalived"
      - name: run-dir
        empty-dir: {}
      - name: chroot-host
        hostPath:
          path: "/"
      initContainers:
      - name: render-config-keepalived
        image: {{ .Images.baremetalRuntimeCfgImage }}
        command:
        - runtimecfg
        - render
        - "/etc/kubernetes/kubeconfig"
        - "--api-vip"
        - "{{ onPremPlatformAPIServerInternalIP . }}"
        - "--ingress-vip"
        - "{{ onPremPlatformIngressIP . }}"
        - "/config"
        - "--out-dir"
        - "/etc/keepalived"
        resources: {}
        volumeMounts:
        - name: kubeconfig
          mountPath: "/etc/kubernetes"
        - name: script-dir
          mountPath: "/config"
        - name: conf-dir
          mountPath: "/etc/keepalived"
        imagePullPolicy: IfNotPresent
      containers:
      - name: keepalived
        securityContext:
          privileged: true
        image: quay.io/yboaron/origin-keepalived-ipfailover:latest
        env:
          - name: NSS_SDB_USE_CACHE
            value: "no"
        command:
        - /bin/bash
        - -c
        - |
          #/bin/bash
          sigterm_handler()
          {
            if pid=$(pgrep -o keepalived); then
              kill -s SIGTERM "$pid"
            fi
          }

          reload_keepalived()
          {
            if pid=$(pgrep -o keepalived); then
                kill -s SIGHUP "$pid"
            else
                /usr/sbin/keepalived -f /etc/keepalived/keepalived.conf --dont-fork --vrrp --log-detail --log-console &
            fi
          }

          msg_handler()
          {
            while read -r line; do
              echo "The client sent: $line" >&2
              # currently only 'reload' msg is supported
              if [ "$line" = reload ]; then
                  reload_keepalived
              fi
            done
          }

          remove_vip()
          {
            address=$1
            interface=$(ip -o a | awk "/\s${address}\// {print \$2}")
            cidr=$(ip -o a | awk "/\s${address}\// {print \$4}")
            if [ -n "$interface" ]; then
                ip a del $cidr dev $interface
            fi
          }

          set -ex
          # Ensure that we don't have stale VIPs configured
          # See https://bugzilla.redhat.com/show_bug.cgi?id=1931505
          remove_vip "{{ onPremPlatformAPIServerInternalIP . }}"
          remove_vip "{{ onPremPlatformIngressIP . }}"
          declare -r keepalived_sock="/var/run/keepalived/keepalived.sock"
          export -f msg_handler
          export -f reload_keepalived
          export -f sigterm_handler

          trap sigterm_handler SIGTERM
          if [ -s "/etc/keepalived/keepalived.conf" ]; then
              /usr/sbin/keepalived -f /etc/keepalived/keepalived.conf --dont-fork --vrrp --log-detail --log-console &
          fi

          rm -f "$keepalived_sock"
          socat UNIX-LISTEN:${keepalived_sock},fork system:'bash -c msg_handler'
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: conf-dir
          mountPath: "/etc/keepalived"
        - name: run-dir
          mountPath: "/var/run/keepalived"
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - -c
            - |
              [ ! -s "/etc/keepalived/keepalived.conf" ] || (echo "State = FAULT" > /tmp/keepalived.data && kill -s SIGUSR1 "$(pgrep -o keepalived)" && for i in $(seq 5); do grep -q "State = FAULT" /tmp/keepalived.data && sleep 1 || exit 0; done && exit 1)
          initialDelaySeconds: 20
        terminationMessagePolicy: FallbackToLogsOnError
        imagePullPolicy: IfNotPresent
      - name: keepalived-monitor
        securityContext:
          privileged: true
        image: {{ .Images.baremetalRuntimeCfgImage }}
        env:
          - name: ENABLE_UNICAST
            value: "{{ onPremPlatformKeepalivedEnableUnicast . }}"
          - name: IS_BOOTSTRAP
            value: "no"
        command:
        - dynkeepalived
        - "/var/lib/kubelet/kubeconfig"
        - "/config/keepalived.conf.tmpl"
        - "/etc/keepalived/keepalived.conf"
        - "--api-vip"
        - "{{ onPremPlatformAPIServerInternalIP . }}"
        - "--ingress-vip"
        - "{{ onPremPlatformIngressIP . }}"
        resources:
          requests:
            cpu: 100m
            memory: 200Mi
        volumeMounts:
        - name: resource-dir
          mountPath: "/config"
        - name: kubeconfigvarlib
          mountPath: "/var/lib/kubelet"
        - name: conf-dir
          mountPath: "/etc/keepalived"
        - name: run-dir
          mountPath: "/var/run/keepalived"
        - name: chroot-host
          mountPath: "/host"
        imagePullPolicy: IfNotPresent
      hostNetwork: true
      tolerations:
      - operator: Exists
      priorityClassName: system-node-critical
    status: {}
    {{ end -}}
