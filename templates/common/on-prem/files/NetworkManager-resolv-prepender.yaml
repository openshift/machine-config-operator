mode: 0755
path: "/etc/NetworkManager/dispatcher.d/30-resolv-prepender"
contents:
  inline: |
    {{ if (onPremPlatformAPIServerInternalIP .) -}}
    #!/bin/bash
    set -eo pipefail
    IFACE=$1
    STATUS=$2

    {{if .Proxy -}}
    {{if .Proxy.HTTPProxy -}}
    export HTTP_PROXY={{.Proxy.HTTPProxy}}
    {{end -}}
    {{if .Proxy.HTTPSProxy -}}
    export HTTPS_PROXY={{.Proxy.HTTPSProxy}}
    {{end -}}
    {{if .Proxy.NoProxy -}}
    export NO_PROXY={{.Proxy.NoProxy}}
    {{end -}}
    {{end -}}

    # If $DHCP6_FQDN_FQDN is not empty and is not localhost.localdomain and static hostname was not already set
    if [[ -n "$DHCP6_FQDN_FQDN" && "$DHCP6_FQDN_FQDN" != "localhost.localdomain" && "$DHCP6_FQDN_FQDN" =~ "." ]] ; then
       STATIC_HOSTNAME="$(test ! -e /etc/hostname && echo -n || cat /etc/hostname | xargs)"

       if [[ -z "$STATIC_HOSTNAME" || "$STATIC_HOSTNAME" == "localhost.localdomain" ]] ; then
 
          # run with systemd-run to avoid selinux problems
          systemd-run --property=Type=oneshot --unit resolve-prepender-hostnamectl -Pq \
              hostnamectl set-hostname --static --transient $DHCP6_FQDN_FQDN
       fi
    fi
    
    case "$STATUS" in
        up|dhcp4-change|dhcp6-change)
        >&2 echo "NM resolv-prepender triggered by ${1} ${2}."

        # In DHCP connections, the resolv.conf content may be late, thus we wait for nameservers
        timeout 20s /bin/bash <<EOF
            >&2 echo  "NM resolv-prepender: Checking for nameservers in /var/run/NetworkManager/resolv.conf"
            while ! grep nameserver /var/run/NetworkManager/resolv.conf; do
                >&2 echo  "NM resolv-prepender: NM resolv.conf still empty of nameserver"
                sleep 0.5
            done
    EOF
        # Ensure resolv.conf exists and contains nameservers before we try to run podman
        if [[ ! -e /etc/resolv.conf ]] || ! grep -q nameserver /etc/resolv.conf; then
            cp /var/run/NetworkManager/resolv.conf /etc/resolv.conf
        fi


        NAMESERVER_IP=$(timeout 20s /usr/bin/podman run --rm \
            --authfile /var/lib/kubelet/config.json \
            --net=host \
            {{ .Images.baremetalRuntimeCfgImage }} \
            node-ip \
            show \
            --retry-on-failure \
            "{{ onPremPlatformAPIServerInternalIP . }}" \
            "{{ onPremPlatformIngressIP . }}")
        DOMAINS="${IP4_DOMAINS} ${IP6_DOMAINS} {{.DNS.Spec.BaseDomain}}"
        if [[ -n "$NAMESERVER_IP" ]]; then
            if systemctl -q is-enabled systemd-resolved; then
                >&2 echo "NM resolv-prepender: Setting up systemd-resolved for OKD domain and local IP"
                if [[ ! -f /etc/systemd/resolved.conf.d/60-kni.conf ]]; then
                    >&2 echo "NM resolv-prepender: Creating /etc/systemd/resolved.conf.d/60-kni.conf"
                    mkdir -p /etc/systemd/resolved.conf.d
                    echo "[Resolve]" > /etc/systemd/resolved.conf.d/60-kni.conf
                    echo "DNS=$NAMESERVER_IP" >> /etc/systemd/resolved.conf.d/60-kni.conf
                    echo "Domains=$DOMAINS" >> /etc/systemd/resolved.conf.d/60-kni.conf
                    if systemctl -q is-active systemd-resolved; then
                        >&2 echo "NM resolv-prepender: restarting systemd-resolved"
                        systemctl restart systemd-resolved
                    fi
                fi
            else
                >&2 echo "NM resolv-prepender: Prepending 'nameserver $NAMESERVER_IP' to /etc/resolv.conf (other nameservers from /var/run/NetworkManager/resolv.conf)"
                sed -e "/Generated by/c# Generated by KNI resolv prepender NM dispatcher script" \
                    /var/run/NetworkManager/resolv.conf > /etc/resolv.tmp
                sed -i "0,/^nameserver.*/s//nameserver $NAMESERVER_IP\n\0/" /etc/resolv.tmp
                # Make sure cluster domain is first in the search list
                sed -i "s/^search \(.*\)/search {{.DNS.Spec.BaseDomain}} \1/" /etc/resolv.tmp
                # Remove duplicate cluster domain entries
                sed -i "s/\(search {{.DNS.Spec.BaseDomain}}.*\) {{.DNS.Spec.BaseDomain}}\( .*\|$\)/\1\2/" /etc/resolv.tmp
                # Only leave the first 3 nameservers in /etc/resolv.conf
                sed -i ':a $!{N; ba}; s/\(^\|\n\)nameserver/\n# nameserver/4g' /etc/resolv.tmp
                mv -f /etc/resolv.tmp /etc/resolv.conf
                # Workaround for bz 1929160. Reload NetworkManager to force it to
                # re-run the lookup of the hostname now that we know we have DNS
                # servers configured correctly in resolv.conf.
                nmcli general reload dns-rc
            fi
        fi
        ;;
        *)
        ;;
    esac
    {{ end -}}
