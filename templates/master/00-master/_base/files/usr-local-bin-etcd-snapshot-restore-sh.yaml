filesystem: "root"
mode: 0755
path: "/usr/local/bin/etcd-snapshot-restore.sh"
contents:
  inline: |
    #!/usr/bin/env bash

    set -o errexit
    set -o pipefail

    # example
    # ./etcd-snapshot-restore.sh $path-to-backup 

    if [[ $EUID -ne 0 ]]; then
      echo "This script must be run as root"
      exit 1
    fi

    usage () {
        echo 'Path to the directory containing backup files is required: ./etcd-snapshot-restore.sh <path-to-backup>'
        exit 1
    }

    if [ "$1" == "" ]; then
        usage
    fi

    ASSET_DIR=/home/core/assets

    RESTORE_STATIC_RESOURCES="true"
    if [ -f "$1" ]; then
      # For backward-compatibility, we support restoring from single snapshot.db file or single tar.gz file
      if [[ "$1" =~ \.db$ ]]; then
        RESTORE_STATIC_RESOURCES="false"
        SNAPSHOT_FILE="$1"
      elif [[ "$1" =~ \.tar\.gz$ ]]; then
        BACKUP_FILE="$1"
        tar xzf ${BACKUP_FILE} -C ${ASSET_DIR}/tmp/ snapshot.db
        SNAPSHOT_FILE="${ASSET_DIR}/tmp/snapshot.db"
      else
        usage
      fi
    elif [ -d "$1" ]; then
      BACKUP_FILE=$(ls -vd "$1"/static_kuberesources*.tar.gz | tail -1) || true
      SNAPSHOT_FILE=$(ls -vd "$1"/snapshot*.db | tail -1) || true
      if [ ! -f ${BACKUP_FILE}  -o ! -f ${SNAPSHOT_FILE} ]; then
        usage
      fi
    else
      usage
    fi

    CONFIG_FILE_DIR=/etc/kubernetes
    MANIFEST_DIR="${CONFIG_FILE_DIR}/manifests"
    MANIFEST_STOPPED_DIR="${ASSET_DIR}/manifests-stopped"
    RUN_ENV=/run/etcd/environment

    ETCDCTL="${ASSET_DIR}/bin/etcdctl"
    ETCD_DATA_DIR=/var/lib/etcd
    ETCD_DATA_DIR_BACKUP=/var/lib/etcd-backup
    RESTORE_ETCD_POD_YAML="${CONFIG_FILE_DIR}/static-pod-resources/etcd-certs/configmaps/restore-etcd-pod/pod.yaml"
    ETCD_MANIFEST="${MANIFEST_DIR}/etcd-pod.yaml"
    ETCD_STATIC_RESOURCES="${CONFIG_FILE_DIR}/static-pod-resources/etcd-member"
    STOPPED_STATIC_PODS="${ASSET_DIR}/tmp/stopped-static-pods"

    source "/usr/local/bin/openshift-recovery-tools"

    function run {
      init
      if [ ! -f "${SNAPSHOT_FILE}" ]; then
        echo "etcd snapshot ${SNAPSHOT_FILE} does not exist."
        exit 1
      fi

      dl_etcdctl
      backup_manifest
      stop_static_pods
      stop_etcd
      stop_kubelet
      stop_all_containers
      backup_data_dir
      remove_data_dir
      [ "${RESTORE_STATIC_RESOURCES}" = "true" ] && remove_kube_static_resources
      copy_snapshot_to_backupdir
      [ "${RESTORE_STATIC_RESOURCES}" = "true" ] && restore_kube_static_resources
      start_static_pods
      copy_etcd_restore_pod_yaml
      start_kubelet
    }

    run
