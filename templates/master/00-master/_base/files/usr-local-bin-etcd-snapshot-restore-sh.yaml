filesystem: "root"
mode: 0755
path: "/usr/local/bin/etcd-snapshot-restore.sh"
contents:
  inline: |
    #!/usr/bin/env bash

    set -o errexit
    set -o pipefail

    # example
    # ./etcd-snapshot-restore.sh $path-to-backup $inital_cluster

    if [[ $EUID -ne 0 ]]; then
      echo "This script must be run as root"
      exit 1
    fi

    usage () {
        echo 'Path to backup file and initial cluster are required: ./etcd-snapshot-restore.sh <path-to-backup> $INITIAL_CLUSTER'
        echo 'path-to-backup can be a directory containing kube static resources and snapshot db, or a single file containing snapshot db'
        exit 1
    }

    if [ "$1" == "" ] || [ "$2" == "" ]; then
        usage
    fi

    INITIAL_CLUSTER="$2"
    ASSET_DIR=./assets

    RESTORE_STATIC_RESOURCES="true"
    if [ -f "$1" ]; then
      # For backward-compatibility, we support restoring from single snapshot.db file or single tar.gz file
      if [[ "$1" =~ \.db$ ]]; then
        RESTORE_STATIC_RESOURCES="false"
        SNAPSHOT_FILE="$1"
      elif [[ "$1" =~ \.tar\.gz$ ]]; then
        BACKUP_FILE="$1"
        tar xzf ${BACKUP_FILE} -C ${ASSET_DIR}/tmp/ snapshot.db
        SNAPSHOT_FILE="${ASSET_DIR}/tmp/snapshot.db"
      else
        usage
      fi
    elif [ -d "$1" ]; then
      BACKUP_FILE=$(ls -vd "$1"/static_kuberesources*.tar.gz | tail -1) || true
      SNAPSHOT_FILE=$(ls -vd "$1"/snapshot*.db | tail -1) || true
      if [ ! -f ${BACKUP_FILE}  -o ! -f ${SNAPSHOT_FILE} ]; then
        usage
      fi
    else
      usage
    fi

    CONFIG_FILE_DIR=/etc/kubernetes
    MANIFEST_DIR="${CONFIG_FILE_DIR}/manifests"
    MANIFEST_STOPPED_DIR="${ASSET_DIR}/manifests-stopped"
    RUN_ENV=/run/etcd/environment

    ETCDCTL="${ASSET_DIR}/bin/etcdctl"
    ETCD_DATA_DIR=/var/lib/etcd
    ETCD_MANIFEST="${MANIFEST_DIR}/etcd-member.yaml"
    ETCD_STATIC_RESOURCES="${CONFIG_FILE_DIR}/static-pod-resources/etcd-member"
    STOPPED_STATIC_PODS="${ASSET_DIR}/tmp/stopped-static-pods"

    source "/usr/local/bin/openshift-recovery-tools"

    function run {
      ETCD_INITIAL_CLUSTER="${INITIAL_CLUSTER}"
      init
      if [ ! -f "${SNAPSHOT_FILE}" ]; then
        echo "etcd snapshot ${SNAPSHOT_FILE} does not exist."
        exit 1
      fi

      dl_etcdctl
      backup_manifest
      DISCOVERY_DOMAIN=$(grep -oP '(?<=discovery-srv=).*[^"]' $ASSET_DIR/backup/etcd-member.yaml )
      if [ -z "$DISCOVERY_DOMAIN" ]; then
        echo "Discovery domain can not be extracted from $ASSET_DIR/backup/etcd-member.yaml"
        exit 1
      fi
      validate_environment
      source /run/etcd/environment
      ETCD_INITIAL_CLUSTER="${INITIAL_CLUSTER}"
      ETCD_NAME=$(validate_etcd_name)
      stop_static_pods
      stop_etcd
      stop_kubelet
      stop_all_containers
      backup_data_dir
      remove_data_dir
      [ "${RESTORE_STATIC_RESOURCES}" = "true" ] && remove_kube_static_resources
      restore_snapshot
      [ "${RESTORE_STATIC_RESOURCES}" = "true" ] && restore_kube_static_resources
      start_static_pods
      start_kubelet
    }

    run
